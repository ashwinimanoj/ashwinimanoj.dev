{"version":3,"sources":["logo.svg","components/header/Header.js","App.js","serviceWorker.js","common/redux/rootReducer.js","common/redux/storeConfig.js","index.js"],"names":["module","exports","__webpack_require__","p","useStyles","makeStyles","theme","root","flexGrow","toolbar","margin","title","width","button","marginRight","spacing","link","menu","display","justifyContent","Header","props","classes","react_default","a","createElement","className","AppBar","color","Toolbar","IconButton","edge","aria-label","Home","Typography","variant","Grid","container","direction","justify","alignItems","item","MenuItem","App","header_Header","Boolean","window","location","hostname","match","reducerMap","example","state","arguments","length","undefined","type","combineReducers","logger","_ref","getState","next","action","console","log","returnValue","store","storeEnhancer","composeWithDevTools","applyMiddleware","createLogger","collapsed","createStore","rootReducer","storeConfig","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uNCUlCC,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACJC,SAAU,GAEZC,QAAS,CACLC,OAAQ,SAEZC,MAAO,CACHH,SAAU,EACVI,MAAO,OAEXC,OAAQ,CACNC,YAAaR,EAAMS,QAAQ,IAE7BC,KAAM,CACFN,OAAQJ,EAAMS,QAAQ,IAE1BE,KAAM,CACFC,QAAS,OACTC,eAAgB,eAgCTC,EA5BA,SAACC,GACZ,IAAMC,EAAUlB,IAChB,OACAmB,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAQf,MACpBgB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQC,MAAM,WACVL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAASH,UAAWJ,EAAQb,SACxBc,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAYC,KAAK,QAAQL,UAAWJ,EAAQT,OAAQe,MAAM,UAAcI,aAAW,QAC/ET,EAAAC,EAAAC,cAACQ,EAAA,EAAD,OAEJV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAYC,QAAQ,KAAKT,UAAWJ,EAAQX,OAA5C,iBAGAY,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAQ,WAAWC,WAAW,UAC1DjB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAMK,MAAI,GACNlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,cAEJnB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAMK,MAAI,GACNlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,kBAEJnB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAMK,MAAI,GACNlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,yBCxCTC,MARf,WACE,OACEpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACmB,EAAD,gBCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECTAC,EAAa,CACjBC,QARqB,WAAwB,IAAvBC,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAGpB,OAHmCA,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GAC7BC,KAECJ,IAQJK,4BAAgBP,mBCI/B,SAASQ,EAATC,GAA8B,IAAZC,EAAYD,EAAZC,SAChB,OAAO,SAAAC,GAAI,OAAI,SAAAC,GACbC,QAAQC,IAAI,gBAAiBF,GAG7B,IAAMG,EAAcJ,EAAKC,GAMzB,OAJAC,QAAQC,IAAI,uBAAwBJ,KAI7BK,ICpBX,IAAMC,EDHS,WACb,IAAIC,OAAgBZ,EAQpB,OANEY,EAAgBC,8BACdC,0BAAgBC,uBAAa,CAC3BC,WAAW,IACTb,IAGDc,sBAAYC,EAAaN,GCNpBO,GAQdC,IAASC,OAAOrD,EAAAC,EAAAC,cANH,kBACXF,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAUX,MAAOA,GACf3C,EAAAC,EAAAC,cAACqD,EAAD,QAIY,MAASC,SAASC,eAAe,SHiH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bc956cea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Grid from '@material-ui/core/Grid';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {Home} from '@material-ui/icons';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n      flexGrow: 1\n    },\n    toolbar: {\n        margin: '0 20%'\n    },\n    title: {\n        flexGrow: 1,\n        width: '20%'\n    },\n    button: {\n      marginRight: theme.spacing(2),\n    },\n    link: {\n        margin: theme.spacing(1),\n    },\n    menu: {\n        display: 'flex',\n        justifyContent: 'flex-end'\n    }\n  }));\n\nconst Header = (props) => {\n    const classes = useStyles();\n    return (\n    <div className={classes.root}>\n        <AppBar color=\"default\">\n            <Toolbar className={classes.toolbar}>\n                <IconButton edge=\"start\" className={classes.button} color=\"inherit\"     aria-label=\"Home\">\n                    <Home></Home>\n                </IconButton>\n                <Typography variant=\"h6\" className={classes.title}>\n                    Ashwini Manoj\n                </Typography>\n                <Grid container direction=\"row\" justify=\"flex-end\" alignItems=\"center\">\n                    <Grid item>\n                        <MenuItem>Home</MenuItem>\n                    </Grid>\n                    <Grid item>\n                        <MenuItem>About Me</MenuItem>\n                    </Grid>\n                    <Grid item>\n                        <MenuItem>Contact Me</MenuItem>\n                    </Grid>\n                </Grid>\n            </Toolbar>\n        </AppBar>\n    </div>);\n}\n\nexport default Header;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './components/header/Header';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header></Header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\n\nconst exampleReducer = (state = {}, action) => {\n    switch(action.type) {\n        default:\n            return state;\n    }\n}\n\nconst reducerMap = {\n  example: exampleReducer\n};\n\nexport default combineReducers(reducerMap);\n\n","import rootReducer from './rootReducer';\nimport { applyMiddleware, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nexport default function storeConfig() {\n  let storeEnhancer = undefined;\n  if (process.env.NODE_ENV !== 'PRODUCTION') {\n    storeEnhancer = composeWithDevTools(\n      applyMiddleware(createLogger({\n        collapsed: true\n      }), logger))\n  }\n\n  return createStore(rootReducer, storeEnhancer);\n}\n\nfunction logger({ getState }) {\n  return next => action => {\n    console.log('will dispatch', action)\n\n    // Call the next dispatch method in the middleware chain.\n    const returnValue = next(action)\n\n    console.log('state after dispatch', getState())\n\n    // This will likely be the action itself, unless\n    // a middleware further in chain changed it.\n    return returnValue\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport storeConfig from './common/redux/storeConfig';\n\nconst store = storeConfig();\n\nconst Root = () => (\n  <Provider store={store}>\n    <App/>\n  </Provider>\n);\n\nReactDOM.render(<Root/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}